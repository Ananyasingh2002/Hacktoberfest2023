#include <stdio.h>
#include <stdlib.h>
struct node {
int info;
struct node *link;
};
struct node *start = NULL;
void traverse()
{
struct node *temp;
if (start == NULL)
printf("\nList is empty\n");
else {
temp = start;
while (temp != NULL) {
printf("Data = %d\n", temp->info);
temp = temp->link;
}
}
}
void insertAtFront()
{
int data;
struct node *temp;
temp = (struct node*)malloc(sizeof(struct node));
printf("\nEnter number to be inserted : ");
scanf("%d", &data);
temp->info = data;
temp->link = start;
start = temp;
}
void insertAtEnd()
{
int data;
struct node *temp, *head;
temp = (struct node*)malloc(sizeof(struct node));
printf("\nEnter number to be inserted : ");
scanf("%d", &data);
temp->link = 0;
temp->info = data;
head = start;
while (head->link != NULL) {
head = head->link;
}
head->link = temp;
}
void insertAtPosition()
{
struct node *temp, *newnode;
int pos, data, i = 1;
newnode = (struct node*)malloc(sizeof(struct node));
printf("\nEnter position and data :");
scanf("%d %d", &pos, &data);
temp = start;
newnode->info = data;
newnode->link = 0;
while (i < pos - 1) {
temp = temp->link;
i++;
}
newnode->link = temp->link;
temp->link = newnode;
}
void deleteFirst()
{
struct node *temp;
if (start == NULL)
printf("\nList is empty\n");
else {
temp = start;
start = start->link;
free(temp);
}
}
void deleteEnd()
{
struct node *temp, *prevnode;
if (start == NULL)
printf("\nList is Empty\n");
else {
temp = start;
while (temp->link != 0) {
prevnode = temp;
temp = temp->link;
}
free(temp);
prevnode->link = 0;
}
}
void deletePosition()
{
struct node *temp, *position;
int i = 1, pos;
if (start == NULL)
printf("\nList is empty\n");
else {
printf("\nEnter index : ");
scanf("%d", &pos);
position = (struct node*)malloc(sizeof(struct node));
temp = start;
while (i < pos - 1) {
temp = temp->link;
i++;
}
position = temp->link;
temp->link = position->link;
free(position);
}
}
void sort()
{
struct node *current = start;
struct node *index = NULL;
int temp;
if (start == NULL) {
return;
}
else {
while (current != NULL) {
index = current->link;
while (index != NULL) {
if (current->info > index->info) {
temp = current->info;
current->info = index->info;
index->info = temp;
}
index = index->link;
}
current = current->link;
}
}
}
void reverseLL()
{
struct node *t1, *t2, *temp;
t1 = t2 = NULL;
if (start == NULL)
printf("List is empty\n");
else {
while (start != NULL) {
t2 = start->link;
start->link = t1;
t1 = start;
start = t2;
}
start = t1;
temp = start;
printf("Reversed linked list is : ");
while (temp != NULL) {
printf("%d \n", temp->info);
temp = temp->link;
}
}
}
void search()
{
struct node *ptr;
int item,i=0,flag;
ptr = start;
if(ptr == NULL)
{
printf("\nEmpty List\n");
}
else
{
printf("\nEnter item which you want to search?\n");
scanf("%d",&item);
while (ptr!=NULL)
{
if(ptr->info == item)
{
printf("item found at location %d ",i+1);
flag=0;
}
else
{
flag=1;
}
i++;
ptr = ptr -> link;
}
}
}
int count()
{
int count = 0;
struct node *current = start;
while(current != NULL) {
count++;
current = current->link;
}
return count;
}
int main()
{
int choice;
do
{
printf("\n\t1. To see list\n");
printf("\t2. For insertion at starting\n");
printf("\t3. For insertion at end\n");
printf("\t4. For insertion at any position\n");
printf("\t5. For deletion of first element\n");
printf("\t6. For deletion of last element\n");
printf("\t7. For deletion of element at any
position\n");
printf("\t8. To sort element\n");
printf("\t9. To reverse the linked list\n");
printf("\t10. To search\n");
printf("\t11. To count\n");
printf("\t12. To exit\n");
printf("\nEnter Choice :\n");
scanf("%d", &choice);
switch (choice) {
case 1:
traverse();
break;
case 2:
insertAtFront();
break;
case 3:
insertAtEnd();
break;
case 4:
insertAtPosition();
break;
case 5:
deleteFirst();
break;
case 6:
deleteEnd();
break;
case 7:
deletePosition();
break;
case 8:
sort();
break;
case 9:
reverseLL();
break;
case 10:
search();
break;
case 11:
count();
printf("Counting of the list is %d",count());
break;
case 12:
break;
default:
printf("Incorrect Choice\n");
}
}
while (choice != 12);
return 0;
}
